<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caynan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2016-10-21T07:15:33.000Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Caynan Sousa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linked List in Python</title>
    <link href="http://localhost:4000/2016/linked-list-python/"/>
    <id>http://localhost:4000/2016/linked-list-python/</id>
    <published>2016-10-21T04:38:48.000Z</published>
    <updated>2016-10-21T07:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today, we’re going to implement a linked list in python</p>
<a id="more"></a>
<h3 id="overview">Overview</h3>
<blockquote>In computer science, a linked list is a data structure consisting of a group
of nodes which together represent a sequence. Under the simplest form, each
node is composed of a data and a reference (in other words, a link) to the
next node in the sequence; more complex variants add additional links. This
structure allows for efficient insertion or removal of elements from any
position in the sequence.  <footer><strong>Wikipedia</strong><cite><a href="http://en.wikipedia.org/wiki/Linked_list" target="_blank" rel="external">Linked List</a></cite></footer></blockquote>
<p>Linked Lists are really simple data structures, we only have to remember when solving problems that involve them, to notice if we’re using singly linked lists (only have links to the next node) or doubly linked lists (links for previous and next nodes).</p>
<h3 id="code">CODE!</h3>
<p>Enough talking let’s start coding. First you should note the elements that a Linked List have, I see two of them, a Node and obviously the Linked List in itself, which if you think we could represent as a Node, we only need the Head of a Linked List to represent it.</p>
<p>So let’s create two classes in python, <code>Node</code> that is going to serve as a container for the data, and <code>LinkedList</code> that is going to provide us with different methods to manipulate the data structure.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Node</span><span class="params">(object)</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=None, next=None)</span>:</span></div><div class="line">      self.data = data</div><div class="line">      self.next = next</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">return</span> str(self.data)</div></pre></td></tr></table></figure>
<p>There is only two things to note on our implementation of <strong>Node</strong>, first we’re declaring it as a protected class, eventhough Python don’t have a true protected notion, it’s more of a <a href="https://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Naming" target="_blank" rel="external">notation</a>, but I’m digressing here, the other interesting thing is that we’re rewriting the <code>__str__</code> method from object, Node’s superclass, so every time we print our Nodes we’re going to see the data they store, which in my opinion makes more sense.</p>
<p>Now let’s see our biggest class, <strong>LinkedList</strong>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span><span class="params">(object)</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      self.length = <span class="number">0</span></div><div class="line">      self.head = <span class="keyword">None</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">return</span> self._toString()</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">return</span> self.length</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_toString</span><span class="params">(self)</span>:</span></div><div class="line">      node = self.head</div><div class="line">      string_to_return = []</div><div class="line"></div><div class="line">      <span class="comment"># Print the value of the nodes</span></div><div class="line">      <span class="keyword">while</span> node:</div><div class="line">      string_to_return.append(<span class="string">'%s '</span> % node)</div><div class="line">      node = node.next</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="string">''</span>.join(string_to_return).strip()</div></pre></td></tr></table></figure>
<p>There are two things worth noting in this part of our class, first we’re rewriting the method <code>__len__</code> from object, which permit us call <code>len</code> in our LinkedList, also note we’re using a list to accumulate the string in the <code>_toString</code> method, this is to avoid waste of space, since strings are immutable in python, using something like <code>+=</code> will result in many objects.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, data)</span>:</span></div><div class="line">   <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">      self.head = _Node(data=data)</div><div class="line">      self.length += <span class="number">1</span></div><div class="line">   <span class="keyword">else</span>:</div><div class="line">      node = self.head</div><div class="line">      <span class="keyword">while</span> node:</div><div class="line">         <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            node.next = _Node(data=data)</div><div class="line">            self.length += <span class="number">1</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">         <span class="keyword">else</span>:</div><div class="line">            node = node.next</div></pre></td></tr></table></figure>
<p>Our add method, is pretty straight forward, if our Linked List is empty (head is None) we create a new node as head. If not, we find the tail of list, and insert our new Node after it.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self, x)</span>:</span></div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length):</div><div class="line">      <span class="keyword">if</span> node.data = x:</div><div class="line">         <span class="keyword">return</span> i</div><div class="line">      <span class="keyword">else</span>:</div><div class="line">         node = node.next</div><div class="line">   <span class="keyword">raise</span> Exception(<span class="string">'Item Not Found!)</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, x)</span>:</span></div><div class="line">   <span class="comment"># case is empty</span></div><div class="line">   <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">      <span class="keyword">raise</span> Exception(<span class="string">'Trying to remove from empty list'</span>)</div><div class="line">   <span class="comment"># case is head</span></div><div class="line">   <span class="keyword">elif</span> self.head.data == x:</div><div class="line">      self.head = <span class="keyword">None</span></div><div class="line">      self.length -= <span class="number">1</span></div><div class="line">   <span class="comment"># other cases</span></div><div class="line">   <span class="keyword">else</span>:</div><div class="line">      node = self.head</div><div class="line">      <span class="keyword">while</span> node:</div><div class="line">         <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Item Not Found!'</span>)</div><div class="line">         <span class="keyword">elif</span> node.next.data == x:</div><div class="line">            node.next = node.next.next</div><div class="line">            self.length -= <span class="number">1</span></div><div class="line">         <span class="keyword">else</span>:</div><div class="line">            node = node.next</div></pre></td></tr></table></figure>
<p>We finally get to our final methods, <code>index</code>, which provide us the index of a given Node, if it exists, and <code>remove</code> which as the name says remove some node given the data it contains.</p>
<h3 id="the-end">The End</h3>
<p>Well folks that was it, as an exercise try to implement a doubly linked list, without looking to the code here, so you could make sure that you’re truly understanding linked lists, and not simply rewriting the code.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today, we’re going to implement a linked list in python&lt;/p&gt;
    
    </summary>
    
    
      <category term="foo, bar" scheme="http://localhost:4000/tags/foo-bar/"/>
    
  </entry>
  
</feed>
